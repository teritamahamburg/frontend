# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CSV {
    columns: [String!]!
    rows: String!
}

type ChildItem {
    checkedAt: Date
    childId: ID!
    createdAt: DateTime!
    deletedAt: DateTime
    histories: [HistoryChildItem!]!
    id: ID!
    internalId: ID!
    item: Item!
    itemId: ID!
    name: String
    room: Room
}

type Course {
    id: ID!
    name: String!
}

type HistoryChildItem {
    checkedAt: Date
    childId: ID!
    createdAt: DateTime!
    deletedAt: DateTime
    id: ID!
    internalId: ID!
    itemId: ID!
    name: String
    room: Room
}

type HistoryItem {
    checkedAt: Date
    createdAt: DateTime!
    depreciationAt: Date
    disposalAt: Date
    id: ID!
    room: Room!
    seal: String
}

type Item {
    admin: User!
    amount: Int!
    checkedAt: Date
    children: [ChildItem!]!
    code: String!
    course: Course!
    createdAt: DateTime!
    deletedAt: DateTime
    depreciationAt: Date
    disposalAt: Date
    histories: [HistoryItem!]!
    id: ID!
    name: String!
    purchasedAt: Date!
    room: Room!
    seal: String
}

type ItemResult {
    item: Item
    message: String
    success: Boolean!
}

type Mutation {
    addItem(data: ItemInput!): ItemResult!
    addItems(data: [ItemInput!]!): [ItemResult!]!
    editChild(childId: ID!, data: EditChildItemInput!): Result!
    editChildren(childIds: [ID!]!, data: EditChildItemInput!): [Result!]!
    editItem(data: EditItemInput!, id: ID!): Result!
    editItems(data: EditItemInput!, ids: [ID!]!): [Result!]!
    removeChildren(childIds: [ID!]!): Result!
    removeItems(ids: [ID!]!): Result!
    restoreChild(childId: ID!): Result!
    restoreItem(id: ID!): Result!
}

type Query {
    child(childId: ID!): ChildItem
    children(childEnum: ChildEnum = NORMAL, search: String, sort: [[String!]!] = [["id", "asc"]]): [ChildItem!]!
    csv(paranoid: Boolean = false): CSV!
    item(id: ID!): Item
    items(itemEnum: ItemEnum = NORMAL, search: String, sort: [[String!]!] = [["id", "asc"]]): [Item!]!
    users: [User!]!
}

type Result {
    message: String
    success: Boolean!
}

type Room {
    id: ID!
    number: Int!
}

type User {
    id: ID!
    name: String!
}

enum ChildEnum {
    NORMAL
    ONLY_DELETED
}

enum ItemEnum {
    ALL
    NORMAL
    ONLY_DELETED
}

input EditChildItemInput {
    checkedAt: Date
    createdAt: DateTime
    name: String
    room: Int
}

input EditItemInput {
    checkedAt: Date
    depreciationAt: Date
    disposalAt: Date
    room: Int
    seal: Upload
}

input ItemInput {
    admin: String!
    amount: Int = 1
    checkedAt: Date
    code: String!
    course: String!
    createdAt: DateTime
    depreciationAt: Date
    disposalAt: Date
    name: String!
    purchasedAt: Date!
    room: Int!
    seal: Upload
}


"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

scalar Upload

"A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Time
